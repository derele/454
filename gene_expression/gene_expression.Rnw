<<gene.expr, echo=FALSE, cache=TRUE, results=hide>>=

## read the 454 mapping first  
## alternative method using library(GenomicRanges) would be:
## aligns <- readBamGappedAlignments("/home/ele/Data/RNAseq/mapping/AJ_T19M_1.bam")
## ie. bam <- scanBam("/home/ele/Data/RNAseq/mapping/AJ_T19M_1.bam", param=param)

## Rsamtools
what <- c("rname")
param <- ScanBamParam(what = what) # , "strand", "pos", "qwidth", "seq")
  
files <- list.files("/home/ele/Data/454/mapping/mapping_each_lib/", "*sorted.bam$")

counts.for.files <- function (f){
  countsList <- list()
  for (fi in f) {
    bam <- scanBam(paste("/home/ele/Data/454/mapping/mapping_each_lib/", fi, sep=""), param=param)
    counts <- table(bam[[1]]$rname)
    counts.frame <- as.data.frame(counts)
    countsList[[fi]] <- counts.frame
  }
  return(countsList)
}

countsList <- counts.for.files(files)

counts.frame.long <- melt(countsList, id.vars="Var1")
counts.frame.long$variable <- NULL

counts.frame.wide <- reshape(counts.frame.long, v.names="value",
                             idvar="Var1", direction="wide", timevar="L1")
names(counts.frame.wide) <- gsub("^value.final\\.", "", names(counts.frame.wide))
names(counts.frame.wide) <- gsub("\\.sff.trimmed.sff.fasta.sorted.bam$", "", names(counts.frame.wide))
row.names(counts.frame.wide) <- counts.frame.wide$Var1
counts.frame.wide$Var1 <- NULL
n454.map <- sum(rowSums(counts.frame.wide))

## read the solexa tag-counts
what <- c("rname", "strand", "pos", "qwidth", "seq")
param <- ScanBamParam(what = what)
bam <- scanBam("/home/ele/Data/nlaIII-tags/UW08F_tags.bam", param=param)

nTags <- length(bam[[1]]$seq)
counts <- as.data.frame(table(bam[[1]]$rname))
names(counts) <- c("contig", "solexa.tags")

nMapped <- sum(counts$solexa.tags)
nUniq <- length(unique(bam[[1]]$seq))

nUMapped <- nTags-nMapped

lst <- lapply(names(bam[[1]]), function(elt) {
  do.call(c, unname(lapply(bam, "[[", elt)))
})
names(lst) <- names(bam[[1]])
df <- do.call("DataFrame", lst)

nUniqUMapped <- length(unique(df[is.na(df$rname), "seq"]))

counts <- merge(counts, counts.frame.wide, by.x="contig", by.y="row.names")

names(counts) <- gsub("179F", "T1", names(counts))
names(counts) <- gsub("10F", "T2", names(counts))
names(counts) <- gsub("KS4F", "E1", names(counts))
names(counts) <- gsub("UW07F", "E2", names(counts))
names(counts) <- gsub("L2R3", "L2", names(counts))
names(counts) <- gsub("M175", "M", names(counts))

counts$all.reads <- apply(counts[,2:length(counts)], 1, sum)

### merge all counts into the main data
contig.df <- merge(contig.df, counts, all.x=TRUE)

raw.counts <- contig.df[contig.df$AcMN, c("E1", "E2", "T1", "T2")]
rownames(raw.counts) <- contig.df[contig.df$AcMN, "contig"]
counts <- subset(raw.counts, rowSums(counts)>64)


ideg6 <- read.delim("/home/ele/thesis/454/gene_expression/output_ideg6.csv", skip=21, header=TRUE)


## counts <- as.data.frame(t(apply(counts, 1,
##                                 function (x) c(sum(x[1:2]), sum(x[3:4])))))

## con.DE <- newCountDataSet(counts, as.factor(c("E", "T")))
## con.DE <- estimateSizeFactors(con.DE)
## con.norm <- counts( con.DE, normalized=TRUE )
## colnames(con.norm) <- c("E", "T")

## multi.f.test <- function (two.col.exp){
##   raw.p <- sapply(1:nrow(two.col.exp), function (i) {
##     fisher.test(matrix(c(two.col.exp[i,1], sum(two.col.exp[,1]),
##                          two.col.exp[i,2], sum(two.col.exp[,2])), nrow=2))$p.value})
##   logFC <- apply(two.col.exp, 1, function (x) log(x[1]/x[2]))
##   data.frame( logFC, FDR=p.adjust(raw.p))}

## res <- multi.f.test(con.norm)

## ## collapsed for Bm orthologs 
## bst <- contig.df[contig.df$Ac, c("Bm.hit", "E1", "E2", "T1", "T2")]
## bst <- bst[!is.na(bst$Bm.hit),]
## bst <- do.call("rbind", by(bst, bst$Bm.hit, function (x) colSums(x[,2:5])))
## bst <- subset(bst, rowSums(bst)>64)
## bst <- as.data.frame(t(apply(bst, 1,
##                                 function (x) c(sum(x[1:2]), sum(x[3:4])))))

## bst.DE <- newCountDataSet(bst, as.factor(c("E", "T")))
## bst.DE <- estimateSizeFactors(bst.DE)
## bst.norm <- counts( bst.DE, normalized=TRUE )

## res.bst <- multi.f.test(bst.norm)

## ## collapsed for Ce orhtologs
## cst <- contig.df[contig.df$Ac, c("Ce.hit", "E1", "E2", "T1", "T2")]
## cst <- cst[!is.na(cst$Ce.hit),]
## cst <- do.call("rbind", by(cst, cst$Ce.hit, function (x) colSums(x[,2:5])))
## cst <- subset(cst, rowSums(cst)>64)
## cst <- as.data.frame(t(apply(cst, 1,
##                                 function (x) c(sum(x[1:2]), sum(x[3:4])))))

## cst.DE <- newCountDataSet(cst, as.factor(c("E", "T")))
## cst.DE <- estimateSizeFactors(cst.DE)
## cst.norm <- counts( cst.DE, normalized=TRUE )

## res.cst <- multi.f.test(cst.norm)

## OC <- merge(res, contig.df[, c("contig", "Bm.hit", "Ce.hit")],
##             by.x="row.names", by.y="contig" )

## OC <- merge(OC, res.bst, by.x="Bm.hit", by.y="row.names",
##             all.x=TRUE, suffixes=c(".Con", ".Bm"))

## OC <- merge(OC, res.cst, by.x="Ce.hit", by.y="row.names",
##             all.x=TRUE, suffixes=c("", "", ".Ce"))
## names(OC)[(ncol(OC)-1):ncol(OC)] <- c("logFC.Ce", "FDR.Ce")

## rownames(OC) <- OC$Row.names
## OC$Row.names <- NULL

## SignifOC <- subset(OC, FDR.Con<0.01 & FDR.Bm<0.01 &  FDR.Ce<0.01)

## ## SignifOC[order(SignifOC$FDR.Con),]

## OC.454.c <- rownames(SignifOC)

## pData <- cbind(c("E1", "E2", "T1", "T2")w)
## rownames(pData) <- c("E1", "E2", "T1", "T2")
## pData <- as.data.frame(pData)
## names(pData) <- c("origin")

## phenoData <- new("AnnotatedDataFrame", data = pData)

## NORM <- newCountDataSet(raw.counts, as.factor(c("E","E", "T", "T")))
## NORM <- estimateSizeFactors(NORM)
## NORM <- counts( NORM, normalized=TRUE )

## allSet <- new("ExpressionSet",
##               exprs=as.matrix(NORM),
##               phenoData = phenoData)

## ann.heat.454 = annHeatmap2(exprs(allSet[OC.454.c]),
##   ann=list(Col=list(data=pData(allSet[OC.454.c]), inclRef=FALSE)))

@ 
