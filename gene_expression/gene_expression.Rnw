<<gene.expr, echo=FALSE, cache=TRUE, results=hide>>=

## read the 454 mapping first  
## alternative method using library(GenomicRanges) would be:
## aligns <- readBamGappedAlignments("/home/ele/Data/RNAseq/mapping/AJ_T19M_1.bam")
## ie. bam <- scanBam("/home/ele/Data/RNAseq/mapping/AJ_T19M_1.bam", param=param)

## Rsamtools
what <- c("rname")
param <- ScanBamParam(what = what) # , "strand", "pos", "qwidth", "seq")
  
files <- list.files("/home/ele/Data/454/mapping/mapping_each_lib/", "*sorted.bam$")

counts.for.files <- function (f){
  countsList <- list()
  for (fi in f) {
    bam <- scanBam(paste("/home/ele/Data/454/mapping/mapping_each_lib/", fi, sep=""), param=param)
    counts <- table(bam[[1]]$rname)
    counts.frame <- as.data.frame(counts)
    countsList[[fi]] <- counts.frame
  }
  return(countsList)
}

countsList <- counts.for.files(files)

counts.frame.long <- melt(countsList, id.vars="Var1")
counts.frame.long$variable <- NULL

counts.frame.wide <- reshape(counts.frame.long, v.names="value",
                             idvar="Var1", direction="wide", timevar="L1")
names(counts.frame.wide) <- gsub("^value.final\\.", "", names(counts.frame.wide))
names(counts.frame.wide) <- gsub("\\.sff.trimmed.sff.fasta.sorted.bam$", "", names(counts.frame.wide))
row.names(counts.frame.wide) <- counts.frame.wide$Var1
counts.frame.wide$Var1 <- NULL
n454.map <- sum(rowSums(counts.frame.wide))

## read the solexa tag-counts
what <- c("rname", "strand", "pos", "qwidth", "seq")
param <- ScanBamParam(what = what)
bam <- scanBam("/home/ele/Data/nlaIII-tags/UW08F_tags.bam", param=param)

nTags <- length(bam[[1]]$seq)
counts <- as.data.frame(table(bam[[1]]$rname))
names(counts) <- c("contig", "solexa.tags")

nMapped <- sum(counts$solexa.tags)
nUniq <- length(unique(bam[[1]]$seq))

nUMapped <- nTags-nMapped

lst <- lapply(names(bam[[1]]), function(elt) {
  do.call(c, unname(lapply(bam, "[[", elt)))
})
names(lst) <- names(bam[[1]])
df <- do.call("DataFrame", lst)

nUniqUMapped <- length(unique(df[is.na(df$rname), "seq"]))

counts <- merge(counts, counts.frame.wide, by.x="contig", by.y="row.names")

names(counts) <- gsub("179F", "T1", names(counts))
names(counts) <- gsub("10F", "T2", names(counts))
names(counts) <- gsub("KS4F", "E1", names(counts))
names(counts) <- gsub("UW07F", "E2", names(counts))
names(counts) <- gsub("L2R3", "L2", names(counts))
names(counts) <- gsub("M175", "M", names(counts))

counts$all.reads <- apply(counts[,2:length(counts)], 1, sum)

### merge all counts into the main data
contig.df <- merge(contig.df, counts, all.x=TRUE)

## discard all non Ac matches
cst <- contig.df[contig.df$AcMN, c("E1", "E2", "L2", "M", "T1", "T2")]
rownames(cst) <- contig.df[contig.df$AcMN, "contig"]

cst <- cst[rowSums(cst)>48, ]
cst <- cst[!is.na(cst$E1),]

conds.eel <- factor(c("EU", "EU", "L2", "M", "TW", "TW"))
conds.mf <- factor(c("F", "F", "L2", "M", "F", "F"))
conds.ad <- factor(c("Ad", "Ad", "L2", "Ad", "Ad", "Ad"))

exp.get.3.diff <- function (countsFrame) {
  cds.eel <- newCountDataSet(countsFrame, conds.eel)
  cds.eel <- estimateSizeFactors(cds.eel)
  cds.eel <- estimateVarianceFunctions(cds.eel)
  res.eel <- nbinomTest(cds.eel, "TW", "EU")

  cds.mf <- newCountDataSet(countsFrame, conds.mf)
  cds.mf <- estimateSizeFactors(cds.mf)
  cds.mf <- estimateVarianceFunctions(cds.mf)
  res.mf <- nbinomTest(cds.mf, "M", "F")

  cds.ad <- newCountDataSet(countsFrame, conds.ad)
  cds.ad <- estimateSizeFactors(cds.ad)
  cds.ad <- estimateVarianceFunctions(cds.ad)
  res.ad <- nbinomTest(cds.ad, "Ad", "L2")

  return(list(res.eel, res.mf, res.ad))
}

## for the contig-counts
contig.diff <- exp.get.3.diff(cst)

## collapsed for Bm orthologs 
bst <- contig.df[contig.df$Ac, c("Bm.hit", "E1", "E2", "L2", "M", "T1", "T2")]
bst <- bst[!is.na(bst$Bm.hit),]
bst <- do.call("rbind", by(bst, bst$Bm.hit, function (x) colSums(x[,2:7])))
bst <- bst[rowSums(bst)>48, ]
bst <- bst[!is.na(bst[,"E1"]),]

bm.diff <- exp.get.3.diff(bst)

## Collapsed for Ce orthologs
wst <- contig.df[contig.df$Ac, c("Ce.hit", "E1", "E2", "L2", "M", "T1", "T2")]
wst <- wst[!is.na(wst$Ce.hit),]
wst <- do.call("rbind", by(wst, wst$Ce.hit, function (x) colSums(x[,2:7])))
wst <- wst[rowSums(wst)>48, ]
wst <- wst[!is.na(wst[,"E1"]),]

ce.diff <- exp.get.3.diff(wst)

mf <- merge(contig.df[,c("contig", "Bm.hit", "Bm.annot",  "Ce.hit",  "Ce.annot",
                         "T1", "T2","E1", "E2")],
            contig.diff[[2]][,c("id", "padj", "log2FoldChange")],
            by.x="contig", by.y="id")

mf <- merge(mf, bm.diff[[2]][,c("id", "padj", "log2FoldChange")],
            by.x="Bm.hit", by.y="id", 
            all=TRUE)

mf <- merge(mf, ce.diff[[2]][,c("id", "padj")],
            by.x="Ce.hit", by.y="id", 
            all=TRUE)

the22 <- head(mf[order(mf$padj.x), ], n=22)

eel <- merge(contig.df[,c("contig", "Bm.hit", "Bm.annot",  "Ce.hit",  "Ce.annot",
                          "T1", "T2","E1", "E2")],
             contig.diff[[1]][,c("id", "padj", "log2FoldChange")],
             by.x="contig", by.y="id")

eel <- merge(eel,bm.diff[[1]][,c("id", "padj", "log2FoldChange")],
            by.x="Bm.hit", by.y="id", 
            all=TRUE)

eel <- merge(eel, ce.diff[[1]][,c("id", "padj", "log2FoldChange")],
            by.x="Ce.hit", by.y="id", 
            all=TRUE)



## the orthologous groups...
## collagens
## col.pep <- contig.df[contig.df$Bm.hit%in%"UniRef100_A8NIG1", c("Ac.pep")]
## names(col.pep) <- contig.df[contig.df$Bm.hit%in%"UniRef100_A8NIG1", c("contig")]
## write.sequence(col.pep, "/home/ele/colpep.fasta")

## col.nuc <- contig.df[contig.df$Bm.hit%in%"UniRef100_A8NIG1", c("seq")]
## names(col.nuc) <- contig.df[contig.df$Bm.hit%in%"UniRef100_A8NIG1", c("contig")]
## write.sequence(col.nuc, "/home/ele/colnuc.fasta")

## Phosphoenolpyruvate carboxykinase
## pcarb.pep <- contig.df[contig.df$Bm.hit%in%"UniRef100_A8PGZ3", c("Ac.pep")]
## names(pcarb.pep) <- contig.df[contig.df$Bm.hit%in%"UniRef100_A8PGZ3", c("contig")]
## write.sequence(pcarb.pep, "/home/ele/pcarbpep.fasta")

## pcarb.nuc <- contig.df[contig.df$Bm.hit%in%"UniRef100_A8PGZ3", c("seq")]
## names(pcarb.nuc) <- contig.df[contig.df$Bm.hit%in%"UniRef100_A8PGZ3", c("contig")]
## write.sequence(pcarb.nuc, "/home/ele/pcarbnuc.fasta")

## look at correlations
## vsd <- getVarianceStabilizedData( cds.mf )
## dists <- dist( t( vsd ) )
## idists <- as.matrix(dists)
##heatmap (idists , symm=TRUE, margins = c (7,7))

@ 
