<<overrep, echo=FALSE, results=hide, cache=TRUE>>=

## subsets for contig.df and GO-annotation containing only dn.ds contigs
dn.ds.df <- subset(contig.df, contig.df$Ac & !is.na(dn.ds))
GO.dn.ds <- subset(GO.annot, pept_id%in%dn.ds.df$contig)

## the category of >.5 dn/ds contigs
big05 <- dn.ds.df[dn.ds.df$dn.ds>0.5 &
                  dn.ds.df$contig%in%GO.dn.ds$pept_id, "contig"]

## ## From the GOstats vignette
test.over.under.GOstats <- function (annotation, set, ontology="MF") {
  goframeData <- as.data.frame(cbind(frame.go_id=
                                     as.character(gsub(" ", "",
                                                       annotation[annotation$pcf%in%ontology,
                                                               "go_term"])),
                                     frame.Evidence="IEA",
                                     frame.gene_id=annotation[annotation$pcf%in%ontology,
                                       "pept_id"]))
  goFrame <- GOFrame(goframeData, organism="Anguillicola crassus")
  goAllFrame <- GOAllFrame(goFrame)
  gsc <- GeneSetCollection(goAllFrame, setType = GOCollection())
  over.params <- GSEAGOHyperGParams(name = "GSEA based annot arameters
                                             for over-representation",
                                    geneSetCollection = gsc,
                                    geneIds = as.character(set),
                                    universeGeneIds = unique(annotation[annotation$pcf%in%ontology,
                                      "pept_id"]),
                                    ontology = ontology,
                                    pvalueCutoff = 0.05,
                                    conditional = FALSE,
                                    testDirection = "over") 
  OVER <- hyperGTest(over.params)
  Over <- summary(OVER)
  if (nrow(Over)>0) Over <- cbind(Over, direction="Over") 
  under.params <- GSEAGOHyperGParams(name = "GSEA based annot arameters
                                             for under-representation",
                                     geneSetCollection = gsc,
                                     geneIds = as.character(set),
                                     universeGeneIds = unique(annotation[annotation$pcf%in%ontology,
                                       "pept_id"]),
                                     ontology = ontology,
                                     pvalueCutoff = 0.05,
                                     conditional = FALSE,
                                     testDirection = "under")
  UNDER <- hyperGTest(under.params)
  Under <- summary(UNDER)
  if (nrow(Under)>0) Under <- cbind(Under, direction="Under") 
  rbind(Over, Under)
}

## only for sure AC this time
mf.dn.ds <- test.over.under.GOstats(GO.dn.ds, big05, "MF")
bp.dn.ds <- test.over.under.GOstats(GO.dn.ds, big05, "BP")
cc.dn.ds <- test.over.under.GOstats(GO.dn.ds, big05, "CC")

## make a list of offspring terms to allow finding of 
GOMFOFF.list <- as.list(GOMFOFFSPRING)
GOMFOFF.list <- GOMFOFF.list[!is.na(GOMFOFF.list)]

## which are the amino acid transporter contigs (2) being in dn.ds>0.5
amino.acid.transporter.go <- mf.dn.ds[grepl("acid transmembrane transporter",
                                               mf.dn.ds$Term), 1]
amino.acid.tr.off <- unlist(GOMFOFF.list[amino.acid.transporter.go])

## get the term-contigs plus their boffspring term-contigs
## consistent with mf.dn.ds results (size)
amino.acid.tr.contigs <- unique(GO.dn.ds[GO.dn.ds$go_term%in%
                                            c(amino.acid.transporter.go, amino.acid.tr.off),
                                            "pept_id"])

peptidase.go <- mf.dn.ds[grepl("peptidase", mf.dn.ds$Term), 1]
peptidase.off <- unlist(GOMFOFF.list[peptidase.go])

## consistent with mf.dn.ds results
peptidase.contigs <- unique(GO.dn.ds[GO.dn.ds$go_term%in%
                                        c(peptidase.go, peptidase.off),
                                            "pept_id"])

## consistent with mf.dn.ds results (count)
peptidase.contigs.pos <- contig.df[contig.df$Ac & contig.df$contig%in%peptidase.contigs &
                                   contig.df$dn.ds>0.5 , "contig"]


## just to test that results for quality-contigs only are consistent.
mf.dn.ds.MN <- test.over.under.GOstats(subset(GO.dn.ds,
                                                 GO.dn.ds$pept_id%in%
                                                 contig.df[contig.df$AcMN,
                                                           "contig"]),
                                          big05, "MF")

bp.dn.ds.MN <- test.over.under.GOstats(subset(GO.dn.ds,
                                                 GO.dn.ds$pept_id%in%
                                                 contig.df[contig.df$AcMN,
                                                           "contig"]),
                                          big05, "BP")

cc.dn.ds.MN <- test.over.under.GOstats(subset(GO.dn.ds,
                                                 GO.dn.ds$pept_id%in%
                                                 contig.df[contig.df$AcMN,
                                                           "contig"]),
                                          big05, "CC")

## The same for KEGG doesn't work as I have not-uniqe annotations to a single contig
## keggframeData = data.frame(frame.path_id=as.character(gsub("^ K", "", KEGG.annot$ko_id)),
##   frame.gene_id=as.character(KEGG.annot$pept_id))

## ## HS
## keggframeData = data.frame(frame$path_id, frame$gene_id)
## keggFrame = KEGGFrame(keggframeData, organism = "Homo sapiens")

## keggFrame = KEGGFrame(keggframeData, organism = "Anguillicola crassus")

## gsc <- GeneSetCollection(keggFrame, setType = KEGGCollection())

## big05 <- as.character(keggframeData$frame.gene_id[1:500])
## universe <- as.character(keggframeData$frame.gene_id)


## kparams <- GSEAKEGGHyperGParams(name = "My Custom GSEA based annot Params",
##                                 geneSetCollection = gsc,
##                                 geneIds = big05, universeGeneIds = universe,
##                                 pvalueCutoff = 0.05, testDirection = "over")


## kOver <- hyperGTest(kparams)
## head(summary(kOver))
### WTF!!

dn.ds.df$sigP <- as.factor(dn.ds.df$sigP)
## this for the easy nn-data
u.test <- wilcox.test(dn.ds ~ sigP, data=dn.ds.df, conf.int = TRUE)


## sort the conservation according to breath 
contig.df$novel.50 <- factor(contig.df$novel.50,
                             levels=c("conserved", "novel.in.metazoa",
                               "novel.in.nematoda", "novel.in.clade3",
                               "novel.in.Ac"))

contig.df$novel.80 <- factor(contig.df$novel.80,
                             levels=c("conserved", "novel.in.metazoa",
                               "novel.in.nematoda", "novel.in.clade3",
                               "novel.in.Ac"))

@   

<<nn.dn.ds, echo=FALSE, results=hide>>=

sigP.box <- ggplot(dn.ds.df, aes(dn.ds.df$sigP, dn.ds.df$dn.ds)) + 
  geom_boxplot() + 
  scale_y_log10("dn/ds") +
  scale_x_discrete("", 
                   breaks=levels(dn.ds.df$sigP),
                   labels=c("No signal peptide",
                     "Signal peptide")) +
  opts(title = "SignalP  prediction",
       axis.title.x = theme_text(size = 15), 
       axis.text.x = theme_text(size = 15)) +
  theme_bw()

ggsave("../figures/sigp_dn_ds.png", sigP.box)
@ 

<<novel.dn.ds, echo=FALSE, results=hide>>=

novel.dn.ds.50 <- ggplot(subset(contig.df, contig.df$Ac & !is.na(novel.50) & !is.na(dn.ds)),
                         aes(novel.50, dn.ds)) +
  geom_boxplot() +
  scale_y_log10("dn/ds") +
  scale_x_discrete("") +
  opts(title="evolutionary conseravation at bitsore threshold of 80") +
  theme_bw()

novel.dn.ds.80 <- ggplot(subset(contig.df, contig.df$Ac & !is.na(novel.80) & !is.na(dn.ds)),
                                aes(novel.80, dn.ds)) +
  geom_boxplot() +
  scale_y_log10("dn/ds") +
  scale_x_discrete("") +
  opts(title="evolutionary conseravation at bitsore threshold of 80") +
  theme_bw()

# Set up the page

png("../figures/Figure_5.png", width=2000, height=1000, res=144)
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 2)))
vplayout <- function(x, y)
    viewport(layout.pos.row = x, layout.pos.col = y)

# Make each plot, in the correct location
print(novel.dn.ds.50, vp = vplayout(1, 1 ))
print(novel.dn.ds.80, vp = vplayout(1, 2 ))

grid.text("a", x=unit(0.01,"npc"), y=unit(0.99,"npc")) 
grid.text("b", x=unit(0.51,"npc"), y=unit(0.99,"npc")) 

dev.off() 

@ 

<<novel.dn.ds.test, echo=FALSE, results=hide, cache=TRUE>>=

### Nemenyi-Damico-Wolfe-Dunn test (joint ranking)
  ### Hollander & Wolfe (1999), page 244
  ### (where Steel-Dwass results are given)
get.ndwd <- function(data.df, test.var, fac.var) {
  NDWD <- oneway_test(test.var ~ fac.var, data = data.df,
                      ytrafo = function(data) trafo(data, numeric_trafo = rank),
                      xtrafo = function(data) trafo(data, factor_trafo = function(x)
                        model.matrix(~x - 1) %*% t(contrMat(table(x), "Tukey"))),
                      teststat = "max", distribution = approximate(B = 90000))
  return(NDWD)
}

dn.ds.df$novel.50 <- as.factor(dn.ds.df$novel.50)
dn.ds.df$novel.80 <- as.factor(dn.ds.df$novel.80)

novel.50.ndwd <- get.ndwd(dn.ds.df, dn.ds.df$dn.ds, dn.ds.df$novel.50)
novel.50.kw.ph <- pvalue(novel.50.ndwd, method = "single-step")

novel.80.ndwd <- get.ndwd(dn.ds.df, dn.ds.df$dn.ds, dn.ds.df$novel.80)
novel.80.kw.ph <- pvalue(novel.80.ndwd, method = "single-step")

@ 

<<novel.nn, echo=FALSE, results=hide>>=

sigP.50 <- as.data.frame.matrix(table(contig.df[contig.df$Ac, "novel.50"],
                                      grepl("Yes*", contig.df[contig.df$Ac, "sigP"])))
names(sigP.50) <- c("No.Sigp", "Sigp")
sigP.50 <- transform(sigP.50, proportion=(Sigp/(Sigp+No.Sigp))*100)

sigP.80 <- as.data.frame.matrix(table(contig.df[contig.df$Ac, "novel.80"],
                                      grepl("Yes*", contig.df[contig.df$Ac, "sigP"])))
names(sigP.80) <- c("No.Sigp", "Sigp")
sigP.80 <- transform(sigP.80, proportion=(Sigp/(Sigp+No.Sigp))*100)

sigP.con.test.50 <- fisher.test(contig.df[contig.df$Ac, "novel.50"]%in%
                                c("novel.in.Ac", "novel.in.nematoda"),
                                grepl("Yes*", contig.df[contig.df$Ac, "sigP"]))
sigP.con.test.80 <- fisher.test(contig.df[contig.df$Ac, "novel.80"]%in%
                                c("novel.in.Ac", "novel.in.nematoda"),
                                grepl("Yes*", contig.df[contig.df$Ac, "sigP"]))


sigP.50.p <- ggplot(subset(contig.df, contig.df$Ac & !is.na(novel.50) & !is.na(sigP)),
              aes(novel.50, fill=sigP)) +
       geom_bar(position="fill") + coord_polar(theta="y") +
  scale_y_continuous("") +
  scale_x_discrete("") +
  opts(title="proportion of TUGs in SignalP category\nby evolutionary conseravation categories at bitsore threshold of 50", plot.background = theme_blank()) +
  theme_bw()

sigP.80.p <- ggplot(subset(contig.df, contig.df$Ac & !is.na(novel.80) & !is.na(sigP)),
              aes(novel.80, fill=sigP)) +
  geom_bar(position="fill") + coord_polar(theta="y") +
  scale_y_continuous("") +
  scale_x_discrete("") +
  opts(title="proportion of TUGs in SignalP category\nby evolutionary conseravation categories at bitsore threshold of 50", plot.background = theme_blank()) + 
  theme_bw()

sigP.50.p.MN <- ggplot(subset(contig.df, contig.df$AcMN & !is.na(novel.50) & !is.na(sigP)),
              aes(novel.50, fill=sigP)) +
       geom_bar(position="fill") + coord_polar(theta="y") +
  scale_y_continuous("") +
  scale_x_discrete("") +
  opts(title="proportion of highCA contigs in SignalP category\nby evolutionary conseravation categories at bitsore threshold of 50", plot.background = theme_blank()) +
  theme_bw()

sigP.80.p.MN <- ggplot(subset(contig.df, contig.df$AcMN & !is.na(novel.80) & !is.na(sigP)),
              aes(novel.80, fill=sigP)) +
  geom_bar(position="fill") + coord_polar(theta="y") +
  scale_y_continuous("") +
  scale_x_discrete("") +
  opts(title="proportion of highCA contigs in SignalP category\nby evolutionary conseravation categories at bitsore threshold of 80", plot.background = theme_blank()) + 
  theme_bw()

png("../figures/Figure_6.png", width=2000, height=2000, res=144)
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))

vp1 <- viewport(width = 0.54, height = 0.54, x = 0.25, y = 0.24)
vp2 <- viewport(width = 0.54, height = 0.54, x = 0.25, y = 0.72)
vp3 <- viewport(width = 0.54, height = 0.54, x = 0.74, y = 0.24)
vp4 <- viewport(width = 0.54, height = 0.54, x = 0.74, y = 0.72) 

print(sigP.50.p, vp = vp1)
print(sigP.80.p, vp = vp2)
print(sigP.50.p.MN, vp = vp3)
print(sigP.80.p.MN, vp = vp4)

grid.text("a", x=unit(0.01,"npc"), y=unit(0.99,"npc")) 
grid.text("b", x=unit(0.51,"npc"), y=unit(0.99,"npc")) 
grid.text("c", x=unit(0.01,"npc"), y=unit(0.52,"npc")) 
grid.text("d", x=unit(0.51,"npc"), y=unit(0.52,"npc")) 

dev.off() 

### tests for lethal Ce rnai
rnai.contigs <- table(contig.df[contig.df$Ac, "Ce.rnai"])

u.rnai <- wilcox.test(dn.ds ~ Ce.rnai, data=dn.ds.df, conf.int = TRUE)

f.rnai <- chisq.test(contig.df[contig.df$Ac, "novel.50"]%in%"conserved",
                     contig.df[contig.df$Ac, "Ce.rnai"])

con.rnai <- as.data.frame.matrix(table(contig.df[contig.df$Ac, "novel.50"]%in%"conserved",
                                       contig.df[contig.df$Ac, "Ce.rnai"]))
names(con.rnai) <- c("non.lethal","lethal")
con.rnai <- round(transform(con.rnai, proportion=lethal/(non.lethal+lethal)*100),2)
rownames(con.rnai) <- c("conserved", "other")

@ 
